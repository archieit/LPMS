model OptiConsult
uses "mmxprs"

declarations
    NumProjects = 13
    Projects = 1..NumProjects

    ConsultantNames: set of string
    HomeLocationNames: set of string
    ProjectLocationNames: set of string

    DailySalary: array(ConsultantNames) of real
    BenchLimits: array(ConsultantNames) of real
    Hierarchy: array(ConsultantNames) of integer
    WorkingDays: integer
    TotalTravelBudget: real

    ConsultantsByHomeLocationAndLevel: array(HomeLocationNames, ConsultantNames) of integer
    TravelCosts: array(ProjectLocationNames, ProjectLocationNames) of real
    ProjectLocations: array(Projects) of integer
    Demand: array(Projects, ConsultantNames) of integer
    DemandVariability: real
    DailyRate: array(Projects, ConsultantNames) of real
    ClientSatisfactionPenalty: array(ConsultantNames) of real
    OutsourcingCost: array(ConsultantNames) of real
    ConsultantPreferences: array(ConsultantNames, ProjectLocationNames) of integer
    AllowHomeWorking: integer
    RemoteWorkSatisfactionPenalty: real
    MaximumPenaltyClientSatisfaction: real

    Assign: array(HomeLocationNames, ConsultantNames, Projects, ConsultantNames) of mpvar
    Bench: array(HomeLocationNames, ConsultantNames) of mpvar
    Unfilled: array(Projects, ConsultantNames) of mpvar
    Outsource: array(Projects, ConsultantNames) of mpvar
end-declarations

initializations from "OptiConsult_s2.dat"
    ConsultantNames HomeLocationNames ProjectLocationNames
    DailySalary BenchLimits WorkingDays TotalTravelBudget
    ConsultantsByHomeLocationAndLevel TravelCosts ProjectLocations
    Demand DailyRate DemandVariability ClientSatisfactionPenalty 
    OutsourcingCost ConsultantPreferences AllowHomeWorking
    RemoteWorkSatisfactionPenalty MaximumPenaltyClientSatisfaction
end-initializations

! Hierarchy levels
Hierarchy("Senior Consulting Manager") := 1
Hierarchy("Consulting Manager") := 2
Hierarchy("Senior Consultant") := 3
Hierarchy("Consultant") := 4
Hierarchy("Junior Consultant") := 5

! Adjust demand
forall(p in Projects, l in ConsultantNames) do
    AdjustedDemand(p, l) := round(Demand(p, l) * (1 + DemandVariability))
end-do

! Unfilled penalty 
forall(p in Projects, l in ConsultantNames) do
    UnfilledDef(p, l) := Unfilled(p, l) = AdjustedDemand(p, l) - sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l)
end-do
forall(l in ConsultantNames) do
    MeanDailyRate(l) := sum(p in Projects) DailyRate(p, l) / NumProjects
end-do
UnfilledPenalty := sum(p in Projects, l in ConsultantNames) Unfilled(p, l) * MeanDailyRate(l) * ClientSatisfactionPenalty(l) * WorkingDays

! Outsource Cost
OutsourceCost := sum(p in Projects, l in ConsultantNames) Outsource(p, l) * DailySalary(l) * OutsourcingCost(l) * WorkingDays

! --- Objective: maximise profit ---

! Revenue: consultants generate revenue based on the role they are fulfilling
Revenue := sum(p in Projects, l_d in ConsultantNames)((sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l_d)) Assign(h, l_a, p, l_d) + Outsource(p, l_d)) * DailyRate(p, l_d)) * WorkingDays

! Salary: based on consultants' actual levels
SalaryCost := sum(h in HomeLocationNames, l in ConsultantNames)(ConsultantsByHomeLocationAndLevel(h, l) * DailySalary(l) * WorkingDays)

! Travel cost: only if project location differs from home location
TravelCost := sum(p in Projects, h in HomeLocationNames, l_a in ConsultantNames, l_d in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l_d) and h <> ProjectLocationNames(ProjectLocations(p))) (Assign(h, l_a, p, l_d) * TravelCosts(h, ProjectLocationNames(ProjectLocations(p))))

TotalProfit := Revenue - SalaryCost - TravelCost - UnfilledPenalty - OutsourceCost

! --- Constraints ---

! 1. Supply: each consultant must be assigned to a role or benched
forall(h in HomeLocationNames, l in ConsultantNames) do
    SupplyCS(h, l) := sum(p in Projects, l_d in ConsultantNames | Hierarchy(l) <= Hierarchy(l_d)) Assign(h, l, p, l_d) + Bench(h, l) = ConsultantsByHomeLocationAndLevel(h, l)
end-do

! 2. Bench limit (except Junior Consultants who have limit 1)
forall(h in HomeLocationNames, l in ConsultantNames) do
    BenchLimitCS(h, l) := Bench(h, l) <= BenchLimits(l) * ConsultantsByHomeLocationAndLevel(h, l)
end-do

! 3. Demand cap: don’t overfill any project role (based on adjusted demand)
forall(p in Projects, l in ConsultantNames) do
    DemandCS(p, l) := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) + Outsource(p, l) <= AdjustedDemand(p, l)
end-do



! 4. Travel budget constraint
TravelBudgetCS := TravelCost <= TotalTravelBudget


! --- Solve ---
maximize(TotalProfit)


writeln
writeln("Total Revenue: £", getsol(Revenue))
writeln("Total Salary Cost: £", getsol(SalaryCost))
writeln("Total Travel Cost: £", getsol(TravelCost))
writeln("Total Profit: £", getobjval)

writeln
writeln("===== Consultant Allocations by Project =====")
forall(p in Projects) do
    writeln("Project ", p,  " (", ProjectLocationNames(ProjectLocations(p)), "):")
    forall(h in HomeLocationNames, l_a in ConsultantNames, l_d in ConsultantNames) do
        if getsol(Assign(h, l_a, p, l_d)) > 0.001 then
            writeln("  ", strfmt(getsol(Assign(h, l_a, p, l_d)), 3, 0), "  ", strfmt(l_a, -25), " => ", strfmt(l_d, -25), " (", h, ")")
        end-if
    end-do
end-do

writeln
writeln("===== Demand Fulfilment Summary =====")
forall(p in Projects) do
    writeln("Project ", p, " (", ProjectLocationNames(ProjectLocations(p)), "):")
    forall(l_d in ConsultantNames) do
        Fulfilled := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l_d))
                        getsol(Assign(h, l_a, p, l_d))
        Outsourced := getsol(Outsource(p, l_d))
        Unmet := getsol(Unfilled(p, l_d))
        writeln("  ", strfmt(l_d, -25), ": Fulfilled = ", strfmt(Fulfilled, 3, 0), 
                                        ", Outsourced = ", strfmt(Outsourced, 3, 0), 
                                        ", Unmet = ", strfmt(Unmet, 3, 0), 
                                        " | Total Demand = ", Demand(p, l_d))
    end-do
end-do

writeln
writeln("===== Consultants Who Travelled for Assignments =====")
forall(p in Projects) do
    projLoc := ProjectLocationNames(ProjectLocations(p))
    forall(h in HomeLocationNames, l_a in ConsultantNames, l_d in ConsultantNames) do
        if getsol(Assign(h, l_a, p, l_d)) > 0.01 and h <> projLoc then
            writeln(strfmt(getsol(Assign(h, l_a, p, l_d)), 3, 0), "  ", strfmt(l_d, -25), ": ", strfmt(h, -13),  " => ", projLoc, " (Project ", strfmt(p, -2), ")")
        end-if
    end-do
end-do

writeln
writeln("===== Benched Consultants by Level =====")
forall(l_d in ConsultantNames) do
    BenchedConsultants := sum(h in HomeLocationNames) getsol(Bench(h, l_d))
    writeln(strfmt(l_d, -25), ": ", strfmt(BenchedConsultants, 4, 0))
end-do

writeln
writeln("===== How much would profit improve if we needed one fewer consultant? =====")
forall(p in Projects, l in ConsultantNames) do
    writeln("Dual of demand constraint (P", p, ", ", l, "): ", getdual(DemandCS(p, l)))
end-do



! ====================== EXPERIMENT 1: VARY DEMAND ======================
fopen("demand.csv", F_OUTPUT)
writeln("DemandVariability,Project,Profit,Level,Demand")

mu := -0.55
repeat
    DemandVariability := mu
    forall(l in ConsultantNames) do
        ClientSatisfactionPenalty(l) := 0
        OutsourcingCost(l) := 0
    end-do

    forall(p in Projects, l in ConsultantNames) do
        AdjustedDemand(p, l) := round(Demand(p, l) * (1 + DemandVariability))
        DemandCS(p, l) := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) <= AdjustedDemand(p, l)
    end-do

    Revenue := sum(p in Projects, l in ConsultantNames)((sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l)) * DailyRate(p, l)) * WorkingDays
    UnfilledPenalty := 0
    OutsourceCost := 0
    TotalProfit := Revenue - SalaryCost - TravelCost - UnfilledPenalty - OutsourceCost
    maximize(TotalProfit)

    forall(p in Projects, l in ConsultantNames) do
        writeln(mu, ",", p, ",", getobjval, ",", l, ",", AdjustedDemand(p,l))
    end-do

    mu := mu + 0.125
until mu > 0.501
fclose(F_OUTPUT)

! ====================== EXPERIMENT 2: BENCHING ======================
fopen("bench.csv", F_OUTPUT)
writeln("DemandVariability,Profit,Level,Bench,Unfilled")

mu := -0.51
repeat
    DemandVariability := mu
    forall(l in ConsultantNames) do
        ClientSatisfactionPenalty(l) := 0
        OutsourcingCost(l) := 0
    end-do

    forall(p in Projects, l in ConsultantNames) do
        AdjustedDemand(p, l) := round(Demand(p, l) * (1 + DemandVariability))
        DemandCS(p, l) := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) <= AdjustedDemand(p, l)
        UnfilledDef(p, l) := Unfilled(p, l) = AdjustedDemand(p, l) - sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l)
    end-do
    
    forall(h in HomeLocationNames, l in ConsultantNames) do
    SupplyCS(h, l) := sum(p in Projects, l_d in ConsultantNames | Hierarchy(l) <= Hierarchy(l_d)) Assign(h, l, p, l_d) + Bench(h, l) = ConsultantsByHomeLocationAndLevel(h, l)
    BenchLimitCS(h, l) := Bench(h, l) <= BenchLimits(l) * ConsultantsByHomeLocationAndLevel(h, l)
    end-do

    Revenue := sum(p in Projects, l in ConsultantNames)((sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l)) * DailyRate(p, l)) * WorkingDays
    UnfilledPenalty := 0
    OutsourceCost := 0
    TotalProfit := Revenue - SalaryCost - TravelCost - UnfilledPenalty - OutsourceCost
    maximize(TotalProfit)

    forall(l in ConsultantNames) do
        writeln(mu, ",", getobjval, ",", l, ",", sum(h in HomeLocationNames) getsol(Bench(h,l)), ",", sum(p in Projects) getsol(Unfilled(p,l)))
    end-do

    mu := mu + 0.125
until mu > 0.501
fclose(F_OUTPUT)

! ====================== EXPERIMENT 3: VARY OUTSOURCING COST ======================
fopen("outsourcing.csv", F_OUTPUT)
writeln("OutsourcingCost,Project,Profit,Level,Unfilled,Demand,Outsource")

DemandVariability := 0.5
mu := 1.0
repeat
    forall(l in ConsultantNames) do
        OutsourcingCost(l) := mu
        ClientSatisfactionPenalty(l) := 1.0
    end-do
    
    forall(p in Projects, l in ConsultantNames) do
        AdjustedDemand(p, l) := round(Demand(p, l) * (1 + DemandVariability))
        DemandCS(p, l) := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) + Outsource(p, l) <= AdjustedDemand(p, l)
        UnfilledDef(p, l) := Unfilled(p, l) = AdjustedDemand(p, l) - sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l)
    end-do

    Revenue := sum(p in Projects, l in ConsultantNames)((sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) + Outsource(p, l)) * DailyRate(p, l)) * WorkingDays
    UnfilledPenalty := sum(p in Projects, l in ConsultantNames) Unfilled(p, l) * MeanDailyRate(l) * ClientSatisfactionPenalty(l) * WorkingDays
    OutsourceCost := sum(p in Projects, l in ConsultantNames) Outsource(p, l) * DailySalary(l) * OutsourcingCost(l) * WorkingDays
    TotalProfit := Revenue - SalaryCost - TravelCost - UnfilledPenalty - OutsourceCost
    maximize(TotalProfit)

    forall(p in Projects, l in ConsultantNames) do
        writeln(mu, ",", p, ",", getobjval, ",", l, ",", getsol(Unfilled(p,l)), ",", AdjustedDemand(p,l), ",", getsol(Outsource(p,l)))
    end-do

    mu := mu + 0.125
until mu > 2.501
fclose(F_OUTPUT)

! ====================== EXPERIMENT 4: VARY PENALTY ======================
fopen("penalty.csv", F_OUTPUT)
writeln("ClientSatisfactionPenalty,Project,Profit,Level,Unfilled,Demand,Outsource")

DemandVariability := 0.5
mu := 0.0
repeat
    forall(l in ConsultantNames) do
        OutsourcingCost(l) := 2.5
        ClientSatisfactionPenalty(l) := mu
    end-do

    forall(p in Projects, l in ConsultantNames) do
        AdjustedDemand(p, l) := round(Demand(p, l) * (1 + DemandVariability))
        DemandCS(p, l) := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) + Outsource(p, l) <= AdjustedDemand(p, l)
        UnfilledDef(p, l) := Unfilled(p, l) = AdjustedDemand(p, l) - sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l)
    end-do

    Revenue := sum(p in Projects, l in ConsultantNames)((sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) + Outsource(p, l)) * DailyRate(p, l)) * WorkingDays
    UnfilledPenalty := sum(p in Projects, l in ConsultantNames) Unfilled(p, l) * MeanDailyRate(l) * ClientSatisfactionPenalty(l) * WorkingDays
    OutsourceCost := sum(p in Projects, l in ConsultantNames) Outsource(p, l) * DailySalary(l) * OutsourcingCost(l) * WorkingDays
    TotalProfit := Revenue - SalaryCost - TravelCost - UnfilledPenalty - OutsourceCost
    maximize(TotalProfit)

    forall(p in Projects, l in ConsultantNames) do
        writeln(mu, ",", p, ",", getobjval, ",", l, ",", getsol(Unfilled(p,l)), ",", AdjustedDemand(p,l), ",", getsol(Outsource(p,l)))
    end-do

    mu := mu + 0.125
until mu > 2.001
fclose(F_OUTPUT)

! ====================== EXPERIMENT 5: DUAL VALUES ======================
fopen("duals.csv", F_OUTPUT)
writeln("Project,Level,DualValue")

DemandVariability := 0.5
forall(l in ConsultantNames) do
    ClientSatisfactionPenalty(l) := 1.0
    OutsourcingCost(l) := 2.0
end-do

forall(p in Projects, l in ConsultantNames) do
    AdjustedDemand(p, l) := round(Demand(p, l) * (1 + DemandVariability))
    DemandCS(p, l) := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) + Outsource(p, l) <= AdjustedDemand(p, l)
    UnfilledDef(p, l) := Unfilled(p, l) = AdjustedDemand(p, l) - sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l)
end-do

Revenue := sum(p in Projects, l in ConsultantNames)((sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) + Outsource(p, l)) * DailyRate(p, l)) * WorkingDays
UnfilledPenalty := sum(p in Projects, l in ConsultantNames) Unfilled(p, l) * MeanDailyRate(l) * ClientSatisfactionPenalty(l) * WorkingDays
OutsourceCost := sum(p in Projects, l in ConsultantNames) Outsource(p, l) * DailySalary(l) * OutsourcingCost(l) * WorkingDays
TotalProfit := Revenue - SalaryCost - TravelCost - UnfilledPenalty - OutsourceCost
maximize(TotalProfit)

forall(p in Projects, l in ConsultantNames) do
    writeln(p, ",", l, ",", getdual(DemandCS(p, l)))
end-do
fclose(F_OUTPUT)

! ====================== EXPERIMENT 6: TRAVEL PREFERENCES ======================
fopen("travel.csv", F_OUTPUT)
writeln("Type,Project,Consultant Role,Home Location,Assigned Role,Allocation Location,Quantity,Daily Rate,Daily Salary,Travel Cost")


    forall(l in ConsultantNames) do
        ClientSatisfactionPenalty(l) := 0
        OutsourcingCost(l) := 0
    end-do
    
    forall(h in HomeLocationNames, l_a in ConsultantNames) do
        SupplyCS(h, l_a) := sum(p in Projects, l_d in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l_d) and ConsultantPreferences(l_a, ProjectLocationNames(ProjectLocations(p))) = 1) Assign(h, l_a, p, l_d) + Bench(h, l_a) = ConsultantsByHomeLocationAndLevel(h, l_a)
    end-do

    forall(p in Projects, l in ConsultantNames) do
        DemandCS(p, l) := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l) and ConsultantPreferences(l_a, ProjectLocationNames(ProjectLocations(p))) = 1) Assign(h, l_a, p, l) <= Demand(p, l)
    end-do

    Revenue := sum(p in Projects, l in ConsultantNames)(sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l) and ConsultantPreferences(l_a, ProjectLocationNames(ProjectLocations(p))) = 1) Assign(h, l_a, p, l) * DailyRate(p, l)) * WorkingDays
    UnfilledPenalty := 0
    OutsourceCost := 0
    TotalProfit := Revenue - SalaryCost - TravelCost - UnfilledPenalty - OutsourceCost
    maximize(TotalProfit)

    ! Write assignment details
    forall(p in Projects) do
        forall(h in HomeLocationNames, l_a in ConsultantNames, l_d in ConsultantNames) do
            if getsol(Assign(h, l_a, p, l_d)) > 0 then
                writeln("Assignment,",p,",",l_a,",",h,",",l_d,",",ProjectLocationNames(ProjectLocations(p)),",",strfmt(getsol(Assign(h, l_a, p, l_d)),0,2),",",DailyRate(p, l_d),",",DailySalary(l_a),",",TravelCosts(ProjectLocationNames(ProjectLocations(p)), h))
            end-if
        end-do
    end-do

    ! Write bench details
    forall(h in HomeLocationNames, l_a in ConsultantNames) do
        if getsol(Bench(h, l_a)) > 0 then
            writeln("Bench,,",l_a,",",h,",,,",strfmt(getsol(Bench(h, l_a)),0,2),",,", DailySalary(l_a),",0")
        end-if
    end-do

    ! Write summary section
    writeln
    writeln("SUMMARY")
    writeln("Total Revenue,", getsol(Revenue))
    writeln("Total Salary Cost,", getsol(SalaryCost))
    writeln("Total Travel Cost,", getsol(TravelCost))
    writeln("Total Profit,", getobjval)

fclose(F_OUTPUT)

! ====================== EXPERIMENT 7: HOME WORKING ======================
fopen("home.csv", F_OUTPUT)
writeln("Type,Project,Consultant Role,Home Location,Assigned Role,Allocation Location,Quantity,Daily Rate,Daily Salary,Travel Cost")

    forall(l in ConsultantNames) do
        ClientSatisfactionPenalty(l) := 0
        OutsourcingCost(l) := 0
    end-do
    
    RevenueWorkFromHome := sum(p in Projects, l_d in ConsultantNames, h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l_d) and ConsultantPreferences(l_a, ProjectLocationNames(ProjectLocations(p))) = 0) Assign(h, l_a, p, l_d) * (RemoteWorkSatisfactionPenalty * DailyRate(p, l_d)) * WorkingDays
    RevenueOnSite := sum(p in Projects, l_d in ConsultantNames, h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l_d) and ConsultantPreferences(l_a, ProjectLocationNames(ProjectLocations(p))) <> 0) Assign(h, l_a, p, l_d) * DailyRate(p, l_d) * WorkingDays
    Revenue := RevenueWorkFromHome + RevenueOnSite

    forall(h in HomeLocationNames, l_a in ConsultantNames) do
        SupplyCS(h, l_a) := sum(p in Projects, l_d in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l_d)) Assign(h, l_a, p, l_d) + Bench(h, l_a) = ConsultantsByHomeLocationAndLevel(h, l_a)
    end-do

    forall(p in Projects, l in ConsultantNames) do
        DemandCS(p, l) := sum(h in HomeLocationNames, l_a in ConsultantNames | Hierarchy(l_a) <= Hierarchy(l)) Assign(h, l_a, p, l) <= Demand(p, l)
    end-do

    UnfilledPenalty := 0
    OutsourceCost := 0
    TotalProfit := Revenue - SalaryCost - TravelCost - UnfilledPenalty - OutsourceCost
    maximize(TotalProfit)

    ! Write assignment details
    forall(p in Projects) do
        forall(h in HomeLocationNames, l_a in ConsultantNames, l_d in ConsultantNames) do
            if getsol(Assign(h, l_a, p, l_d)) > 0 then
                writeln("Assignment,",p,",",l_a,",",h,",",l_d,",",ProjectLocationNames(ProjectLocations(p)),",",strfmt(getsol(Assign(h, l_a, p, l_d)),0,2),",",DailyRate(p, l_d),",",DailySalary(l_a),",",TravelCosts(ProjectLocationNames(ProjectLocations(p)), h))
            end-if
        end-do
    end-do

    ! Write bench details
    forall(h in HomeLocationNames, l_a in ConsultantNames) do
        if getsol(Bench(h, l_a)) > 0 then
            writeln("Bench,,",l_a,",",h,",,,",strfmt(getsol(Bench(h, l_a)),0,2),",,", DailySalary(l_a),",0")
        end-if
    end-do

    ! Write summary section
    writeln
    writeln("SUMMARY")
    writeln("Total Revenue,", getsol(Revenue))
    writeln("Total Salary Cost,", getsol(SalaryCost))
    writeln("Total Travel Cost,", getsol(TravelCost))
    writeln("Total Profit,", getobjval)
    
fclose(F_OUTPUT)

end-model
